# Generated by Django 4.2.7 on 2025-10-07 12:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('codename', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('user_management', 'User Management'), ('data_access', 'Data Access'), ('system_admin', 'System Administration'), ('government_access', 'Government Access'), ('driver_management', 'Driver Management'), ('passenger_management', 'Passenger Management'), ('financial_data', 'Financial Data'), ('analytics', 'Analytics'), ('privacy_management', 'Privacy Management'), ('audit_access', 'Audit Access')], max_length=20)),
                ('description', models.TextField()),
                ('resource_type', models.CharField(help_text='Type of resource this permission applies to', max_length=50)),
                ('action', models.CharField(help_text='Action this permission allows (read, write, delete, etc.)', max_length=50)),
                ('is_system_permission', models.BooleanField(default=False, help_text='System permissions cannot be modified')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'rbac_permissions',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('codename', models.CharField(max_length=50, unique=True)),
                ('role_type', models.CharField(choices=[('passenger', 'Passenger'), ('driver', 'Driver'), ('admin', 'Administrator'), ('super_admin', 'Super Administrator'), ('government_official', 'Government Official'), ('support_agent', 'Support Agent'), ('analyst', 'Data Analyst'), ('auditor', 'Auditor')], max_length=20)),
                ('description', models.TextField()),
                ('hierarchy_level', models.IntegerField(default=0, help_text='Higher numbers have more privileges')),
                ('is_system_role', models.BooleanField(default=False, help_text='System roles cannot be deleted')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rbac_roles',
                'ordering': ['-hierarchy_level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('granted_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('granted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rbac.permission')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rbac.role')),
            ],
            options={
                'db_table': 'rbac_role_permissions',
                'unique_together': {('role', 'permission')},
            },
        ),
        migrations.AddField(
            model_name='role',
            name='permissions',
            field=models.ManyToManyField(blank=True, through='rbac.RolePermission', to='rbac.permission'),
        ),
        migrations.CreateModel(
            name='GovernmentAccessRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('government_agency', models.CharField(max_length=200)),
                ('official_title', models.CharField(max_length=100)),
                ('official_id', models.CharField(help_text='Government official ID number', max_length=50)),
                ('request_type', models.CharField(choices=[('user_data', 'User Data Access'), ('driver_data', 'Driver Data Access'), ('financial_data', 'Financial Data Access'), ('safety_data', 'Safety Data Access'), ('analytics_data', 'Analytics Data Access'), ('audit_data', 'Audit Data Access')], max_length=20)),
                ('purpose', models.TextField()),
                ('legal_basis', models.TextField(help_text='Legal basis for the request')),
                ('data_categories', models.JSONField(default=list, help_text='Categories of data requested')),
                ('specific_users', models.JSONField(blank=True, default=list, help_text='Specific user IDs if targeting specific users')),
                ('date_range_start', models.DateTimeField(blank=True, null=True)),
                ('date_range_end', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('access_granted_until', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_requests', to=settings.AUTH_USER_MODEL)),
                ('requesting_official', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='government_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rbac_government_access_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DriverEarningsProtection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('earnings_data_encrypted', models.TextField(blank=True)),
                ('access_level_required', models.CharField(default='admin', help_text='Minimum role level to access', max_length=20)),
                ('government_access_allowed', models.BooleanField(default=False)),
                ('last_accessed_at', models.DateTimeField(blank=True, null=True)),
                ('access_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings_protection', to=settings.AUTH_USER_MODEL)),
                ('last_accessed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rbac_driver_earnings_protection',
            },
        ),
        migrations.CreateModel(
            name='AccessControlRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('rule_type', models.CharField(choices=[('time_based', 'Time Based'), ('ip_based', 'IP Based'), ('resource_based', 'Resource Based'), ('context_based', 'Context Based')], max_length=20)),
                ('conditions', models.JSONField(default=dict, help_text='Rule conditions (time, IP, etc.)')),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=0, help_text='Higher numbers have higher priority')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rbac.permission')),
            ],
            options={
                'db_table': 'rbac_access_control_rules',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('active', 'Active'), ('suspended', 'Suspended'), ('pending_approval', 'Pending Approval'), ('expired', 'Expired')], default='active', max_length=20)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('reason', models.TextField(blank=True, help_text='Reason for role assignment')),
                ('is_active', models.BooleanField(default=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_roles', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rbac.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rbac_user_roles',
                'ordering': ['-assigned_at'],
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.CreateModel(
            name='RoleHierarchy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('can_inherit_permissions', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('child_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_roles', to='rbac.role')),
                ('parent_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_roles', to='rbac.role')),
            ],
            options={
                'db_table': 'rbac_role_hierarchy',
                'unique_together': {('parent_role', 'child_role')},
            },
        ),
        migrations.CreateModel(
            name='PermissionAuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('role_assigned', 'Role Assigned'), ('role_removed', 'Role Removed'), ('permission_granted', 'Permission Granted'), ('permission_revoked', 'Permission Revoked'), ('role_created', 'Role Created'), ('role_modified', 'Role Modified'), ('role_deleted', 'Role Deleted'), ('government_access_granted', 'Government Access Granted'), ('government_access_denied', 'Government Access Denied'), ('permission_check', 'Permission Check'), ('access_denied', 'Access Denied')], max_length=30)),
                ('resource_type', models.CharField(blank=True, max_length=50)),
                ('resource_id', models.CharField(blank=True, max_length=100)),
                ('details', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('permission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rbac.permission')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rbac.role')),
                ('target_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='target_permission_audit_logs', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permission_audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rbac_permission_audit_logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='rbac_permis_user_id_5f698f_idx'), models.Index(fields=['action_type', 'timestamp'], name='rbac_permis_action__0f906e_idx'), models.Index(fields=['resource_type', 'timestamp'], name='rbac_permis_resourc_db3d20_idx')],
            },
        ),
    ]
